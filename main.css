@font-face {
            font-family: 'cbrpnk';
            src: url('./fonts/cbrpnk_icons.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
            font-display: swap;
}

@font-face {
    font-family: 'Mono';
    src: url('./fonts/MonoRegular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
}

:root {
  --white: 255, 255, 255;
  --yellow: 255, 231, 0;
  --black: 0, 0, 0;
  --blue: 0, 167, 216;
  --gray: 192, 192, 192;
  --red: 217, 86, 86;
  --pink: 237, 17, 88;
  --weird: 224, 38, 120;
  --dark: 47, 47, 47;
}
#pause,
.GLITCHED :is(h3, .text) {
  --gap-horizontal: 20px;
  --gap-vertical: 2px;
  --time-anim: 2.25s;
  --blend-mode-1: none;
  --blend-mode-2: none;
  --blend-mode-3: none;
  --blend-mode-4: none;
  --blend-mode-5: none;
  --blend-color-1: transparent;
  --blend-color-2: transparent;
  --blend-color-3: transparent;
  --blend-color-4: transparent;
  --blend-color-5: transparent;
}
form.card section {
  margin: 20px 0px 0px 10px;
}
.GLITCHED .dots::after {
  color: rgb(var(--yellow)) !important;
  font-family: "Mono";
}
.GLITCHED h3 {
  position: relative;
  display: inline-block;
  margin: 0 0 8px;
  overflow: hidden;
  width: 95%;
  font-family: "Mono";
}
.GLITCHED h3:before, .GLITCHED h3:after {
  content: attr(data-text);
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgb(var(--black));
  font: inherit;
  visibility: hidden;
}
.GLITCHED h3:before {
  left: 5px;
  text-shadow: -2px 0 rgb(var(--weird));
  clip: auto;
}
.GLITCHED h3:after {
  left: 3px;
  text-shadow: -2px 0 rgb(var(--blue));
  clip: auto;
}
#pause,
#pause *,
#pause::before,
#pause::after {
  animation: none !important;
  background: none !important;
  background-color: transparent !important;
}

.GLITCHED h3:before {
  visibility: visible;
  animation: glitch-anim-2 4s infinite linear alternate-reverse;
}
.GLITCHED h3:after {
  visibility: visible;
  animation: glitch-anim 2.5s infinite linear alternate-reverse;
}
@keyframes glitch-anim {
  0% {
    clip: rect(29px, 9999px, 11px, 0);
  }
  4.16666667% {
    clip: rect(11px, 9999px, 21px, 0);
  }
  8.33333333% {
    clip: rect(18px, 9999px, 1px, 0);
  }
  12.5% {
    clip: rect(17px, 9999px, 5px, 0);
  }
  16.66666667% {
    clip: rect(3px, 9999px, 27px, 0);
  }
  20.83333333% {
    clip: rect(20px, 9999px, 25px, 0);
  }
  25% {
    clip: rect(25px, 9999px, 19px, 0);
  }
  29.16666667% {
    clip: rect(12px, 9999px, 151px, 0);
  }
  33.33333333% {
    clip: rect(29px, 9999px, 1px, 0);
  }
  37.5% {
    clip: rect(24px, 9999px, 31px, 0);
  }
  41.66666667% {
    clip: rect(9px, 9999px, 1px, 0);
  }
  45.83333333% {
    clip: rect(1px, 9999px, 17px, 0);
  }
  50% {
    clip: rect(3px, 9999px, 27px, 0);
  }
  54.16666667% {
    clip: rect(17px, 9999px, 151px, 0);
  }
  58.33333333% {
    clip: rect(15px, 9999px, 10px, 0);
  }
  62.5% {
    clip: rect(1px, 9999px, 15px, 0);
  }
  66.66666667% {
    clip: rect(10px, 9999px, 3px, 0);
  }
  70.83333333% {
    clip: rect(27px, 9999px, 117px, 0);
  }
  75% {
    clip: rect(2px, 9999px, 5px, 0);
  }
  79.16666667% {
    clip: rect(4px, 9999px, 13px, 0);
  }
  83.33333333% {
    clip: rect(8px, 9999px, 44px, 0);
  }
  87.5% {
    clip: rect(13px, 9999px, 14px, 0);
  }
  91.66666667% {
    clip: rect(21px, 9999px, 31px, 0);
  }
  95.83333333% {
    clip: rect(0px, 9999px, 33px, 0);
  }
  100% {
    clip: rect(9px, 9999px, 148px, 0);
  }
}
@keyframes glitch-anim-2 {
  6.66666667% {
    clip: rect(43px, 9999px, 105px, 0);
  }
  10% {
    clip: rect(5px, 9999px, 0px, 0);
  }
  13.33333333% {
    clip: rect(16px, 9999px, 14px, 0);
  }
  16.66666667% {
    clip: rect(12px, 9999px, 106px, 0);
  }
  20% {
    clip: rect(1px, 9999px, 189px, 0);
  }
  23.33333333% {
    clip: rect(20px, 9999px, 41px, 0);
  }
  26.66666667% {
    clip: rect(30px, 9999px, 176px, 0);
  }
  30% {
    clip: rect(12px, 9999px, 32px, 0);
  }
  33.33333333% {
    clip: rect(22px, 9999px, 155px, 0);
  }
  36.66666667% {
    clip: rect(14px, 9999px, 40px, 0);
  }
  40% {
    clip: rect(25px, 9999px, 86px, 0);
  }
  43.33333333% {
    clip: rect(13px, 9999px, 94px, 0);
  }
  46.66666667% {
    clip: rect(1px, 9999px, 139px, 0);
  }
  50% {
    clip: rect(14px, 9999px, 76px, 0);
  }
  53.33333333% {
    clip: rect(2px, 9999px, 124px, 0);
  }
  56.66666667% {
    clip: rect(6px, 9999px, 70px, 0);
  }
  60% {
    clip: rect(9px, 9999px, 140px, 0);
  }
  63.33333333% {
    clip: rect(7px, 9999px, 151px, 0);
  }
  66.66666667% {
    clip: rect(1px, 9999px, 131px, 0);
  }
  70% {
    clip: rect(21px, 9999px, 183px, 0);
  }
  73.33333333% {
    clip: rect(11px, 9999px, 60px, 0);
  }
  76.66666667% {
    clip: rect(91px, 9999px, 28px, 0);
  }
  80% {
    clip: rect(14px, 9999px, 193px, 0);
  }
  83.33333333% {
    clip: rect(2px, 9999px, 150px, 0);
  }
  86.66666667% {
    clip: rect(3px, 9999px, 131px, 0);
  }
  90% {
    clip: rect(17px, 9999px, 45px, 0);
  }
  93.33333333% {
    clip: rect(18px, 9999px, 37px, 0);
  }
  96.66666667% {
    clip: rect(9px, 9999px, 46px, 0);
  }
  100% {
    clip: rect(38px, 9999px, 15px, 0);
  }
}


.runnerCard p {
  font-size: x-small;
  margin: 0;
  color: rgb(var(--gray));
}
.approach {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-left: 20px;
  position: relative;
  width: 400px;
}
.approach h3 {
  padding: 5px;
  grid-area: title;
  margin: 0;
}
.approach::before {
  content: "APPROACH";
  text-orientation: upright;
  writing-mode: vertical-lr;
  position: absolute;
  top: 0;
  left: -20px;
  font-family: "Mono";
  font-weight: bold;
}
.approach > div {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-areas:
    "title dots"
    "text dots";
  background: rgb(var(--black));
  color: rgb(var(--white));
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
}
.approach .texts {
  grid-area: text;
  display: flex;
  justify-content: space-between;
  padding-left: 5px;
}
.dots {
  grid-area: dots;
  display: flex;
  align-items: stretch;
  margin: 5px;
  position: relative;
}
.approach .dots::after {
  content: "GLITCHED";
  position: absolute;
  font-size: x-small;
  bottom: -6px;
  right: 20%;
  color: rgb(var(--gray));
}
.dots .box {
  display: inline-block;
  border: 7px solid rgb(var(--black));
  text-align: center;
  WIDTH: 34px;
}
.skills .dots .box {
  width: 25px;
}
.dots .box::after {
  content: "+";
  color: rgb(var(--yellow));
  font-weight: bold;
}
section.skills {
  margin-left: 20px;
  position: relative;
  width: 400px;
}
section.skills h3, section.skills p {
  margin: 0;
}
section.skills h3 {
  font-size: 16px;
  width: 1fr;
  font-weight: normal;
}
section.skills p {
  color: rgb(var(--black));
  border-bottom: 1px solid;
  padding: 5px;
}
section.skills p strong {
  color: rgb(var(--dark));
}
section.skills::before,
.harm::before {
  font-family: "Mono";
  font-weight: bold;
}
section.skills::before {
  content: "SKILLS";
  text-orientation: upright;
  writing-mode: vertical-lr;
  position: absolute;
  top: 0;
  left: -20px;
  font-family: "Mono";
  font-weight: bold;
}
section.skills > div {
  display: flex;
  gap: 10px;
  margin-left: 20px;
  position: relative;
  width: 400px;
  align-content: center;
  align-items: center;
  justify-content: space-between;
}
section.skills .dots {
  gap: 5px;
}
section.skills .dots .box {
  border-width: 4px;
}
[data-value="2"] .box,
[data-value="1"] .box:nth-child(1) {
  background: rgb(var(--yellow));
  color: rgb(var(--weird)) !important;
}
[data-value="2"] .box::after,
[data-value="1"] .box:nth-child(1)::after {
  background: rgb(var(--yellow));
  color: rgb(var(--weird));
}
.augmentations {
  width: 420px;
  padding: 5px;
}
.augmentations h3 {
  font-weight: normal;
  margin: 0;
}
.augmentations .text {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 3px 0px 5px 30px;
  width: -webkit-fill-available;
}
.augmentations .desc {
  display: none;
}
.augmentations input[type="checkbox"]:checked ~ .desc {
  display: block;
  padding: 0 20px 0 5px;
  background: rgb(var(--weird));
  text-align: justify;
  border-left: 5px solid;
}
@keyframes agu-gl {
  form {
    background-color: rgb(var(--red));
  }
  to {
    background-color: rgb(var(--yellow));
  }
}

.augmentations .GLITCHED .text {
  font-family: "Mono";
  text-shadow:
    5px 0 0 rgb(var(--red)),
    1px 0 0 rgb(var(--blue)),
    3px 2px 0 rgb(var(--weird)),
    3px -2px 0 rgb(var(--yellow));
  animation: text-glitch 0.5s infinite;
}

@keyframes text-glitch {
  0% {
    text-shadow: 5px 0 rgb(var(--red)), 1px 0 rgb(var(--blue));
  }
  25% {
    text-shadow: 1px 0 rgb(var(--red)), 5px 0 rgb(var(--blue));
  }
  50% {
    text-shadow: 5px 0 rgb(var(--blue)), 1px 0 rgb(var(--red));
  }
  75% {
    text-shadow: 1px 0 rgb(var(--blue)), 5px 0 rgb(var(--red));
  }
  100% {
    text-shadow: 5px 0 rgb(var(--red)), 1px 0 rgb(var(--blue));
  }
}
.hunted label.angleOpen,
.hunted h1 {
  color: rgb(var(--yellow));
  animation: linear 1s infinite alternate agu-gl;
  font-family: "Mono";
}

.augmentations .GLITCHED .text p {
  color: rgb(var(--red));
}
section.gear {
  display: grid;
  grid-template-areas:
    ". .";
  width: 420px;
  padding: 5px;
  gap: 5px;
}
section.gear > h3 {
  font-weight: normal;
  display: flex;
  align-content: center;
  align-items: center;
  justify-content: center;
}
section.gear div {
  display: flex;
  flex-wrap: wrap;
  align-content: center;
  align-items: center;
}
section.gear div:not(.stack, .load) > input {
  display: none;
}
section.gear .box {
  display: inline-block;
  width: 15px;
  height: 15px;
  border: 1px solid;
}
section.gear input:checked ~ label .box {
  background: rgb(var(--yellow));
  transition: all 0.2s linear;
  transform: rotate(45deg);
}
section.gear label {
  padding-left: 5px;
  font-size: 14px;
  display: flex;
  gap: 5px;
}
section.gear p {
  display: flex;
  align-items: center;
}
.load input {
  position: relative;
}
.load input:nth-child(4)::after, .load input:nth-child(6)::after {
  content: "";
  border-right: 3px solid;
  position: absolute;
  bottom: 1px;
  top: 0;
  right: -5px;
}
.stress {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  margin: 20px 0;
  width: 400px;
}
.stress::before {
  content: "STRESS: ";
  font-family: "Mono";
}

.stress p {
  padding: 5px
}
.stress p.active {
  animation: linear 1s infinite alternate agu-gl;
}

.stress input {
  display: none;
}
.stress label {
  display: flex;
  width: 26px;
  height: 26px;
  border: 1px solid rgb(var(--black));
  transform: rotate(45deg);
  align-content: center;
  align-items: center;
  justify-content: center;
}
.stress input:checked + label {
  width: 26px;
  height: 26px;
  background: rgb(var(--blue));
}
.stress input:checked + label::before {
  font-family: "cbrpnk", "Mono";
  content: "*"; /* CBR+PNK Stress icon U+2A */
  transform: rotate(-45deg);
  display: inline-block;
  font-size: large;
  color: rgb(var(--yellow));
  font-weight: 900;
}
.stress > label:last-of-type {
  border: 4px solid rgb(var(--yellow));
  display: block;
  width: 26px;
  height: 26px;
}

/* CBR+PNK stress symbol class for chat messages */
.stress-symbol {
  font-family: "cbrpnk", "Mono";
}
.skills span.active {
  font-weight: bold;
  color: rgb(var(--red));
}
.harm {
  position: relative;
  width: 420px;
}
.harm ul {
  list-style-type: decimal;
}
.harm input[type="text"] {
  border: 0px;
  border-bottom: 1px solid;
}
.harm input[type="checkbox"] {
  transform: rotate(0deg);
}
.harm h3, .harm ul {
  font-weight: normal;
  margin: 0;
}
.harm li[data-type="effect"]::after { 
  content: "}E"; 
  font-family: "cbrpnk", "Mono";
}

.harm li[data-type="dice"]::after { 
  content: "{-"; 
  font-family: "cbrpnk", "Mono";
}

.harm li[data-type="out"]::after { 
  content: "OUT"; 
  font-family: "Mono";
  font-weight: bold;
  padding-left: 2px;
}

.harm li[data-type="die"]::after { 
  content: "💀"; 
  font-family: "Mono";
}

.harm::before {
  content: "HARM";
  text-orientation: upright;
  writing-mode: vertical-lr;
  position: absolute;
  top: 0;
  right: -10px;
  background: rgb(var(--yellow));
  padding: 28px 10px;
  font-family: "Mono";
  font-weight: bold;
}

form.runnerCard {
  background: rgb(var(--white));
}

.harm input[type="text"] {
  width: 204px;
}

input[type="text"] {
    display: inline-block;
    height: 20px;
}
.editor .editor-content {
    min-height: 100px;
}
.editor-content p {
  font-size: medium;
}

.augmentations > div > input[type="checkbox"] {position: absolute;left: 0;}

.augmentations > div { position: relative; }

label.name {width: 100%;}

.art,
.persona {
    position: relative;
}

.art h1,
.persona h1 {
  position: absolute;
  bottom: 3px;
  left: 0;
  right: 0;
  background: rgba(var(--black),0.66);
  border:  none;
  margin: 0;
  padding: 20px 0;
  backdrop-filter: blur(5px);
}

.art h1 input,
.persona h1 input {
  color: rgb(var(--white));
  border: none;
  padding: 20px;
  border-bottom: 1px solid rgb(var(--gray));
}

.roll > div {
  display: flex;
  align-items: center;
}
.roll input {
  display: none;
}
.roll label {
  border: 1px solid rgb(var(--gray));
  padding: 5px 10px;
  background: rgb(var(--blue));
  text-align: center;
}
.roll input:checked ~ label {
  background: rgb(var(--yellow));
}
.roll input:checked + label {
  background: rgb(var(--blue));
  flex-grow: 1;
}
section.roll {
  display: grid;
}
.effect::before {
  content: "E ";
  width: 40px;
  font-family: "cbrpnk", "Mono";
}
.effect label {
  background: rgb(var(--yellow));
}
.effect input:checked ~ label {
  background: rgb(var(--weird));
}
.effect input:checked + label {
  background: rgb(var(--yellow));
  flex-grow: 1;
}

.threat::before {
  content: "T ";
  width: 40px;
  font-family: "cbrpnk", "Mono";
}
.threat label {
  background: rgb(var(--red));
  color: rgb(var(--white));
}
.threat input:checked ~ label {
  background: rgb(var(--gray));
  color: rgb(var(--black));
}
.threat input:checked + label {
  background: rgb(var(--red));
  flex-grow: 1;
  color: rgb(var(--white));
}

.addDice::after {
  content: "+";
  font-family: "cbrpnk", "Mono";
}
.approach .select h3 {
  color: rgb(var(--yellow));
  border-color: rgb(var(--yellow));
}

.skills .select h3 {
  color: rgb(var(--red));
  border-color: rgb(var(--red));
}

.sheet.window-app .window-content {
  padding: 0;
  /* background: transparent; */
}

li.chat-message.message.flexcol:has(.runner) {
  position: relative;
  background: transparent;
  color: rgb(var(--white));
  padding: 0;
  border-width: 0;
}

li.chat-message.message.flexcol:has(.runner) header {
  display: none;
}

li.chat-message.message.flexcol:has(.runner) .situation {
  position:absolute;
  top: 0;
  background: rgba(var(--black),.66);
  backdrop-filter: blur(5px);
  width: 100%;
  display: flex;
  justify-content: space-around;
}

li.chat-message.message.flexcol .runner > .text {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(var(--black),.66);
  border:  none;
  margin: 0;
  padding: 0px 5px 7px;
  backdrop-filter: blur(5px);
}

li.chat-message.message.flexcol:has(.runner) .result {
  display: flex;
  align-items: center;
}
li.chat-message.message.flexcol:has(.runner) .result h3 {
  flex-grow: 1;
}

li.chat-message.message.flexcol .dice span {
  display: inline-block;
  background: rgb(var(--yellow));
  color: rgb(var(--black));
  margin: 3px;
  width: 15px;
  height: 15px;
  text-align: center;
  font-weight: bold;
  font-family: "Mono";
}

li.chat-message.message.flexcol .desc strong {
  color: rgb(var(--blue));
}

li.chat-message.message.flexcol .dice span.GLITCHED {
  background: rgb(var(--red));
  color: rgb(var(--white));
}

.buttons {
  margin-top: 5px;
}

.resistRoll {
  background: rgb(var(--weird));
}
.actionRoll {
  background: rgb(var(--yellow));
}
.breathRoll {
  background: rgb(var(--blue));
}

h1 input[type="text"],
*:not(::after):not(::before) {
  font-family: "Mono";
  font-weight: 400;
  font-style: normal;
  background: transparent;
}

.editor-content p {
  color: rgb(var(--black));
}

h1, h2, h3 {
  border-bottom: 0px;
}

input[type="text"],
.desc strong,
.dice span,
.harm *,
.skills::before,
.runnerCard h3,
.roll *,
.approach * {
  font-family: "Mono";
}

.angle {
  position: absolute;
  left: 0;
  right: 0;
  background: rgba(var(--black),0.66);
  border:  none;
  margin: 0;
  backdrop-filter: blur(5px);
}

.angle input,
.angle p {
  color: white;
  padding: 10px 20px;
  text-align: justify;
}

.angle {
  bottom: calc(100% - 20px);
}
.angle.expan {
  bottom: auto;
  z-index: 1;
}

.angle input[type="checkbox"] {
  display: none;
}

label.angleOpen {
  width: 100%;
  text-align: center;
  display: block;
  color: white;
  font-family: Mono;
  font-size: large;
}

strong {
  color: rgb(var(--blue));
  font-weight: bold;
}

.roll > div:first-child > div {
  width: 50%;
  display: flex;
  align-items: center;
}

input[name="system.angle.for"] {
  text-align: center;
  font-size: large;
}

.angle .tox.tox-tinymce .tox-edit-area__iframe {
  background: rgb(var(--gray));
}

em {font-style: italic;color: rgb(var(--yellow));}

.bar {
  display: flex;
  justify-content: space-between;
  align-content: center;
  padding: 20px;
}

.bar > * {
  height: 20px;
  border: 2px solid rgb(var(--gray));
}

.bar label {
  color: rgb(var(--white));
}

.bar input:checked + label {
  background: rgb(var(--yellow));
  color: rgb(var(--red));
}

.bar > div {
  width: 33%;
  background: rgb(var(--black));
  color: rgb(var(--white));
  text-align: center;
}

.bar .DEBT {
  background: linear-gradient(90deg, rgb(var(--red)) 0%, rgb(var(--red)) calc(var(--progress)*33.33%), rgb(var(--black)) calc(var(--progress)*34.33%), rgb(var(--black)) 100%);
}
.bar .CRED {
  background: linear-gradient(270deg, rgb(var(--yellow)) 0%, rgb(var(--yellow)) calc(var(--progress)*33.33%), rgb(var(--black)) calc(var(--progress)*34.33%), rgb(var(--black)) 100%);
}
.tox.tox-tinymce {
  min-height: 200px;
}

button.load {
  background: rgb(var(--yellow));
  font-size: 11px;
}

.harm .track {
  display: inline-block;
  width: 100px;
  border: 1px solid rgb(var(--black));
  height: 20px;
  background: linear-gradient(
    90deg,
    rgb(var(--weird)) 0%,
    rgb(var(--weird)) calc(var(--value)/var(--max)*100%),
    transparent calc(var(--value)/var(--max)*100%),
    transparent 100%
    );
  text-align: center;
}

.runnerCard .stack {
  border: 2px solid;
  min-width: 70px;
  justify-content: center;
  background: linear-gradient(
    90deg,
    rgb(var(--yellow)) 0%,
    rgb(var(--yellow)) calc(var(--stack)/var(--max)*100%),
    transparent calc(var(--stack)/var(--max)*100%),
    transparent 100%
  );
}

#sidebar {
  background: rgba(var(--black),.33);
  backdrop-filter: blur(5px);
}

#chat-controls .roll-type-select {
  background: rgb(var(--blue));
  font-family: "Mono";
}

textarea#chat-message {
  background: rgb(var(--yellow));
  color: #444;
}

.fa-regular,
.fa-solid,
.fas {
  color: rgb(var(--weird));
  font-family: "Mono";
}

figcaption {
  font-family: "Mono";
  background:  rgba(var(--red),.5)
}

#pause img.fa-spin, #logo {
  display: none;
}

div#breaktime-app section.window-content {
  background: rgb(var(--red));
}
div#breaktime-app section.window-content .fas {
  color: rgb(var(--yellow));
}

.gm-screen-container.window-content.tab.active {
  background: rgba(var(--black),0.66);
}
.gm-screen-app .gm-screen-actions.tabs .meta-actions button,
.gm-screen-app .gm-screen-actions.tabs .gm-screen-tabs .item:not(.active),
.gm-screen-app .gm-screen-actions .gm-screen-button {
  background: rgb(var(--yellow));
}

.gm-screen-app .gm-screen-actions.tabs .gm-screen-tabs .active {
  background: rgb(var(--red));
}

.gm-screen-grid-cell-content.sheet:has(.runnerCard) {
  background: rgb(var(--white));
}

form.itemCard {
  display: grid;
  gap: 20px;
  background: rgba(var(--red),.8);
  grid-template-columns: 1fr 1fr;
}

form.itemCard .art {
  height: fit-content;
}

form.itemCard  input[type="text"] {
  font-size: 20px;
  
}

.itemCard .stack {
  display: flex;
  padding: 5px;
}

.stack .track {
  flex-grow: 1;
}

.stack button {
  aspect-ratio: 1;
  width: 40px;
  clip-path: polygon(100% 0, 100% 80%, 80% 100%, 0 100%, 0 0);
  background: rgb(var(--yellow));
  border: none;
}

.stack .track > div {
  display: inline-block;
  aspect-ratio: 1;
  width: 40px;
  clip-path: polygon(100% 0, 100% 80%, 80% 100%, 0 100%, 0 0);
  background: rgb(var(--yellow));
  border: none;
  font-family: "Mono";
  font-size: large;
  padding: 0 5px;
}

.itemCard .editor-content {
  max-height: 245px;
}

.rank {
  display: grid;
  grid-template-areas:
      ". . .";
  gap: 20px;
}

.rank .title {
  display: flex;
  justify-content: space-around;
  align-items: center;
  background: rgb(var(--red));
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  padding: 5px 10px;
  
}

.title span {
  font-size: small;
  font-family: "Mono";
}

.rank h3 {
  font-weight: bold;
  margin: 0;
  color: rgb(var(--white));
  font-family: "Mono";
}

.hunterCard header {
  display: grid;
  grid-template-columns: 40% 60%;
  margin-bottom: 20px;
}

form.hunterCard {
  background: rgb(var(--dark));
  padding: 5px;
}

form.hunterCard header img {
  border: 10px solid rgb(var(--red));
  border-radius: 0;
  
}

form.hunterCard header input[name="name"] {
  color: rgb(var(--white));
  background: rgb(var(--red));
  border: 0;
  font-size: 20px;
  padding: 20px;
  display: inline-block;
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  border-radius: 0;
}


form.hunterCard header textarea {
  background: rgb(var(--white));
}

.hunterCard textarea {
  color: rgb(var(--white));
}
.hunterCard .persona .editor-content {
  padding: 0 5px;
}

.RANK3 {
  position: relative;
}

.RANK3 label {
  position: absolute;
  top: 7px;
  display: inline-block;
  width: 17px; height: 17px;
  background: rgb(var(--white));
  border: 1px solid rgb(var(--black));
  transform: rotate(45deg);
}

.RANK3 input:checked + label {
  background: rgb(var(--yellow));
}

.rank > div > .skill{
  display: flex;
  margin: 5px 0;
  align-items: center;
}

.rank > div > .skill input[type="checkbox"],
.RANK3 input[type="checkbox"] {
  display: none;
}

.rank > div > .skill label {
  display: inline-block;
  width: 17px; height: 15px;
  background: rgb(var(--white));
  border: 1px solid rgb(var(--black));
  transform: rotate(45deg);
}


.rank > div > .skill input[type="text"]{
  color: rgb(var(--white));
  border: 0;
  border-bottom: 1px solid rgb(var(--red));
  margin-left: 5px;
}

.hunterCard .track {
  display: inline-block;
  display: flex;
  gap: 5px;
  justify-content: center;
}
.hunterCard .track > div {
  width: 20px;
  height: 30px;
  background: rgb(var(--red));
  transform: skew(-15deg);
  clip-path: polygon(80% 0%, 100% 20%, 100% 100%, 20% 100%, 0% 80%, 0 0);
}

.tracks > div {
  border: 5px solid rgb(var(--white));
  width: 80%;
  display: flex;
  margin: auto;
  align-items: center;
  justify-content: space-around;
}

.tracks p {
  display: inline-block;
  padding: 10px 5px;
  font-family: "Mono";
  color: rgb(var(--white));
}

.aa {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.aa h3 {
  font-weight: bold;
  margin: 0;
  color: rgb(var(--white));
  font-family: "Mono";
  background: rgb(var(--red));
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  padding: 5px 10px;
}

.hunterCard input[type="text"] {
  display: inline-block;
  border: 0;
  border-bottom: 1px solid rgb(var(--red));
  color: rgb(var(--white));
  padding: 15px;
}

.rank > div > .skill input:checked + label {
  background: rgb(var(--red));
}

.hunterCard input[type="text"] {
  display: inline-block;
  border: 0;
  border-bottom: 1px solid rgb(var(--red));
  color: rgb(var(--white));
  padding: 15px;
}

.rank > div > .skill input:checked + label {
  background: rgb(var(--red));
}

.hunterCard .editor-content p{
  color: rgb(var(--white));
}

.hunterCard .track[data-value="1"] > div:nth-child(-n+1) {
  background: rgb(var(--yellow)) !important;
}
.hunterCard .track[data-value="2"] > div:nth-child(-n+2) {
  background: rgb(var(--yellow)) !important;
}
.hunterCard .track[data-value="3"] > div:nth-child(-n+3) {
  background: rgb(var(--yellow)) !important;
}
.hunterCard .track[data-value="4"] > div:nth-child(-n+4) {
  background: rgb(var(--yellow)) !important;
}
.hunterCard .track[data-value="5"] > div:nth-child(-n+5) {
  background: rgb(var(--yellow)) !important;
}
.hunterCard .track[data-value="6"] > div:nth-child(-n+6) {
  background: rgb(var(--yellow)) !important;
}

.SR input:checked + label {
  text-decoration: line-through
}

.SR {
  display: flex;
  align-items: center;
}

.itemCard .art img {
  width: 100%;
}

form.runnerCard header {
  max-width: 440px;
}

form.runnerCard .approach { grid-area: 1 / 2 / 2 / 3; }
form.runnerCard header { grid-area: 1 / 1 / 3 / 2; }
form.runnerCard .skills { grid-area: 2 / 2 / 3 / 3; }
form.runnerCard .stress { grid-area: 3 / 1 / 4 / 2; }
form.runnerCard .augmentations { grid-area: 4 / 1 / 5 / 2; }
form.runnerCard .harm { grid-area: 5 / 1 / 6 / 2; }
form.runnerCard .gear { grid-area: 3 / 2 / 6 / 3; }

li.chat-message.message.flexcol.whisper.blind {
  filter: hue-rotate(45deg);
}

li.chat-message.message.flexcol.whisper,
.box.gliched {
  filter: saturate(0.5) invert(0.9);
}

form.black.runnerCard {
  background: rgb(var(--dark));
  color: rgb(var(--white));
}

form.black.runnerCard .roll label {
  color: rgb(var(--dark));
}

form.black.runnerCard [type="text"] {
  color: rgb(var(--white));
}

form.black.runnerCard .skills span.active,
form.black.runnerCard .skills .select h3 {
  text-shadow: 2px 0 0 #fff, -2px 0 0 #fff, 0 2px 0 #fff, 0 -2px 0 #fff, 1px 1px #fff, -1px -1px 0 #fff, 1px -1px 0 #fff, -1px 1px 0 #fff;
}

form.black.runnerCard .harm::before {
  color: rgb(var(--dark));
}

form.runnerCard .headerButton {
  display: flex;
  align-content: center;
  align-items: center;
}
form.runnerCard .headerButton i.fa-solid {
  font-size: large;
  padding: 0 5px;
}

@keyframes highlight {
  0%   {background-color: rgb(var(--yellow));; }
  50%  {background-color: rgb(var(--weird));}
  100% {background-color: rgb(var(--blue));; }
}
input[name="addDice"]:checked + label:not(:nth-child(10)) {
  animation: highlight 2s linear 0s infinite alternate;
}

.gear .stack {
  color: rgb(var(--weird));
  margin-left: 5px;
}

.runner.overload {
    min-height: 330px;
}

tr[data-gliched="2"] .dots .box,
tr[data-gliched="1"] .dots .box:nth-child(1) {
  filter: saturate(0.5) invert(0.9);
}

form.runnerCard header img {
  min-height: 200px;
}

.message-content :is(h1,h3){
  color: white;
  font-family: "Mono";
  font-weight: 400;
  font-style: normal;
  font-size: 1.7em;
}

button, 
input[type="button"], 
input[type="submit"] {
  font-family: "Mono";
}

.cbrpnk-button {
  background: rgb(var(--yellow));
  color: rgb(var(--black));
  border: 2px solid rgb(var(--black));
  font-family: "Mono";
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  padding: 10px 20px;
  transition: all 0.2s ease;
}
.cbrpnk-button:hover {
  background: rgb(var(--weird));
  color: rgb(var(--white));
  transform: translateY(-2px);
}

.cbrpnk-input {
  background: transparent;
  border: 0;
  border-bottom: 2px solid rgb(var(--yellow));
  color: rgb(var(--white));
  font-family: "Mono";
  padding: 5px;
}
.cbrpnk-input:focus {
  border-bottom-color: rgb(var(--weird));
  outline: none;
}

.cbrpnk-glow {
  text-shadow: 
    0 0 5px rgb(var(--yellow)),
    0 0 10px rgb(var(--yellow)),
    0 0 15px rgb(var(--yellow));
}

.cbrpnk-border {
  border: 2px solid rgb(var(--yellow));
  box-shadow: 
    0 0 10px rgba(var(--yellow), 0.5),
    inset 0 0 10px rgba(var(--yellow), 0.1);
}

.cbrpnk-scroll::-webkit-scrollbar {
    width: 8px;
}

.cbrpnk-scroll::-webkit-scrollbar-track {
    background: rgb(var(--black));
}

.cbrpnk-scroll::-webkit-scrollbar-thumb {
    background: rgb(var(--yellow));
    clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
}

.cbrpnk-scroll::-webkit-scrollbar-thumb:hover {
    background: rgb(var(--weird));
}
input[type="text"]:focus,
textarea:focus {
  border-bottom-color: rgb(var(--yellow));
  box-shadow: 0 1px 0 rgb(var(--yellow));
}

/* CBR+PNK CHARACTER DEBUGGING CLASSES */
/* =================================== */
/* Add these classes to any element to test if the CBR+PNK font is working */

.font-test-cbrpnk {
  font-family: "cbrpnk", "Mono" !important;
  font-size: 24px !important;
  color: rgb(var(--yellow)) !important;
  background: rgb(var(--black)) !important;
  padding: 10px !important;
  border: 2px solid rgb(var(--weird)) !important;
}

.font-test-mono {
  font-family: "Mono" !important;
  font-size: 16px !important;
  color: rgb(var(--white)) !important;
  background: rgb(var(--dark)) !important;
  padding: 10px !important;
  border: 1px solid rgb(var(--gray)) !important;
}

/* TEST CLASSES FOR A AND M CHARACTERS */
/* ==================================== */
/* Use these classes to see where A and M appear in your system */

.test-a::before {
  content: "A";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--yellow));
  background: rgb(var(--black));
  padding: 2px 4px;
  margin-right: 5px;
  border: 1px solid rgb(var(--yellow));
}

.test-m::before {
  content: "M";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--blue));
  background: rgb(var(--black));
  padding: 2px 4px;
  margin-right: 5px;
  border: 1px solid rgb(var(--blue));
}

/* A and M with other characters for testing combinations */
.test-a-increase::before {
  content: "A {";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--yellow));
}

.test-a-decrease::before {
  content: "A }";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--red));
}

.test-m-increase::before {
  content: "M {";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--yellow));
}

.test-m-decrease::before {
  content: "M }";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--red));
}

.test-a-effect::before {
  content: "A E";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--white));
}

.test-m-threat::before {
  content: "M T";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--white));
}

.test-a-synergy::before {
  content: "A S";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--blue));
}

.test-m-stress::before {
  content: "M *";
  font-family: "cbrpnk", "Mono";
  color: rgb(var(--weird));
}

/* REMOVE THESE TEST CLASSES ONCE YOU FIGURE OUT WHAT A AND M ARE */
/* ================================================================ */

/*
KNOWN CBR+PNK CHARACTERS:
U+2A (*) = Stress
U+2D (-) = Remove a Die  
U+2B (+) = Add a Die
U+41 (A) = Unknown - possibly Approach, Action, Augmentation, or Advantage
U+45 (E) = Effect
U+54 (T) = Threat
U+4D (M) = Unknown - possibly Matrix, Module, Modifier, or Mark
U+53 (S) = Synergy
U+7B ({) = Increase
U+7D (}) = Decrease

USAGE INSTRUCTIONS:
1. Apply this CSS to your FoundryVTT system
2. Add test classes like "test-a" or "test-m" to elements in your character sheets
3. See where A and M symbols appear and in what context
4. Try combination classes like "test-a-increase" to test theories
5. Once you identify what A and M are, remove all the test classes
6. Update the actual CBR+PNK character usage throughout the CSS
*/

/* NETSCAPE MODULE STYLING */
.netscape {
  width: 420px;
  padding: 5px;
  margin-top: 20px;
  position: relative;
}

.netscape h3 {
  font-weight: normal;
  margin: 0 0 10px 0;
  color: rgb(var(--blue));
  font-family: "Mono";
  border-bottom: 2px solid rgb(var(--blue));
}

.netscape::before {
  content: "NETSCAPE";
  text-orientation: upright;
  writing-mode: vertical-lr;
  position: absolute;
  top: 0;
  left: -20px;
  font-family: "Mono";
  font-weight: bold;
  color: rgb(var(--blue));
}

.vpn-tracker {
  margin: 10px 0;
}

.vpn-tracker h4 {
  font-family: "Mono";
  font-weight: bold;
  margin: 0 0 5px 0;
  color: rgb(var(--blue));
}

.vpn-tracker .vpn-track {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 5px;
  margin: 10px 0;
}

.vpn-tracker .vpn-track input {
  display: none;
}

.vpn-tracker .vpn-track label {
  display: flex;
  width: 20px;
  height: 20px;
  border: 2px solid rgb(var(--blue));
  background: transparent;
  align-content: center;
  align-items: center;
  justify-content: center;
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
}

.vpn-tracker .vpn-track input:checked + label {
  background: rgb(var(--blue));
}

.vpn-tracker .vpn-track input:checked + label::before {
  font-family: "cbrpnk", "Mono";
  content: "●";
  color: rgb(var(--white));
  font-weight: 900;
  font-size: 12px;
}

.vpn-desc {
  font-size: x-small;
  color: rgb(var(--gray));
  margin: 5px 0;
  font-style: italic;
}

.net-persona {
  margin: 15px 0;
}

.net-persona h4 {
  font-family: "Mono";
  font-weight: bold;
  margin: 0 0 5px 0;
  color: rgb(var(--blue));
}

.theme-selector select {
  background: rgb(var(--blue));
  color: rgb(var(--white));
  border: 2px solid rgb(var(--blue));
  font-family: "Mono";
  padding: 5px 10px;
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  width: 200px;
}

.theme-selector select:focus {
  outline: none;
  box-shadow: 0 0 10px rgba(var(--blue), 0.5);
}

.theme-desc {
  font-size: x-small;
  color: rgb(var(--gray));
  margin: 5px 0;
  font-style: italic;
}

/* NETSCAPE IN ANGLE SECTION */
.netscape-angle {
  padding: 15px 20px;
  border-top: 1px solid rgba(var(--gray), 0.3);
  margin-top: 15px;
}

.netscape-angle h4 {
  font-family: "Mono";
  font-weight: bold;
  color: rgb(var(--blue));
  margin: 0 0 10px 0;
  font-size: 14px;
}

.netscape-angle .net-persona {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 8px;
}

.netscape-angle .net-persona label {
  font-family: "Mono";
  font-size: 12px;
  color: rgb(var(--white));
  font-weight: bold;
}

.netscape-angle select {
  background: rgb(var(--blue));
  color: rgb(var(--white));
  border: 1px solid rgb(var(--blue));
  font-family: "Mono";
  padding: 3px 8px;
  font-size: 12px;
  border-radius: 0;
  min-width: 120px;
}

.netscape-angle select:focus {
  outline: none;
  box-shadow: 0 0 5px rgba(var(--blue), 0.5);
}

.netscape-angle .theme-desc {
  font-size: 10px;
  color: rgba(var(--white), 0.7);
  font-style: italic;
  margin: 0;
  line-height: 1.2;
}

/* VPN TRACKER ITEM STYLING */
form.vpnTrackerCard {
  display: grid;
  gap: 20px;
  background: rgba(var(--blue), 0.8);
  grid-template-columns: 40% 60%;
  padding: 10px;
}

form.vpnTrackerCard .art {
  height: fit-content;
}

form.vpnTrackerCard .art img {
  border: 5px solid rgb(var(--blue));
  border-radius: 0;
}

form.vpnTrackerCard h1 input[name="name"] {
  color: rgb(var(--white));
  background: rgb(var(--blue));
  border: 0;
  font-size: 18px;
  padding: 15px;
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
}

.vpn-content {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.vpn-info h3 {
  font-family: "Mono";
  font-weight: bold;
  color: rgb(var(--white));
  margin: 0;
}

.vpn-description {
  font-size: small;
  color: rgb(var(--white));
  font-style: italic;
  margin: 5px 0;
}

.vpn-tracker-display {
  background: rgba(var(--black), 0.3);
  padding: 10px;
  border: 2px solid rgb(var(--blue));
}

.vpn-tracker-display h4 {
  font-family: "Mono";
  font-weight: bold;
  color: rgb(var(--yellow));
  margin: 0 0 10px 0;
  text-align: center;
}

.vpn-tracker-display .vpn-track {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 8px;
  margin: 15px 0;
}

.vpn-tracker-display .vpn-track input {
  display: none;
}

.vpn-tracker-display .vpn-track label {
  display: flex;
  width: 25px;
  height: 25px;
  border: 2px solid rgb(var(--blue));
  background: transparent;
  align-content: center;
  align-items: center;
  justify-content: center;
  clip-path: polygon(20% 0%, 95% 0%, 100% 40%, 100% 80%, 100% 100%, 0 100%, 0% 80%, 0 0);
  cursor: pointer;
}

.vpn-tracker-display .vpn-track input:checked + label {
  background: rgb(var(--red));
  border-color: rgb(var(--red));
}

.vpn-tracker-display .vpn-track input:checked + label::before {
  font-family: "cbrpnk", "Mono";
  content: "⚡";
  color: rgb(var(--yellow));
  font-weight: 900;
  font-size: 14px;
}

.vpn-status {
  text-align: center;
  margin: 10px 0;
}

.status-safe {
  color: rgb(var(--yellow));
  font-weight: bold;
}

.status-warning {
  color: rgb(var(--weird));
  font-weight: bold;
}

.status-blown {
  color: rgb(var(--red));
  font-weight: bold;
  animation: blink 1s infinite;
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0.5; }
}

.vpn-instructions {
  background: rgba(var(--dark), 0.7);
  padding: 8px;
  border-left: 3px solid rgb(var(--blue));
}

.vpn-instructions p {
  font-size: x-small;
  color: rgb(var(--gray));
  margin: 2px 0;
  font-family: "Mono";
}

.vpn-instructions strong {
  color: rgb(var(--yellow));
}

.vpn-notes {
  background: rgba(var(--white), 0.9);
  padding: 10px;
  border-radius: 5px;
}

.vpnTrackerCard .editor-content {
  max-height: 150px;
  min-height: 80px;
}

.vpnTrackerCard .editor-content p {
  color: rgb(var(--black));
  font-size: small;
}
